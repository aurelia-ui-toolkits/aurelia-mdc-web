@use "@material/feature-targeting/functions"as feature-targeting-functions;
@use "@material/feature-targeting/mixins"as feature-targeting-mixins;
@use "@material/theme/mixins"as theme-mixins;
@use "@material/theme/variables"as theme-variables;
@use "@material/rtl/mixins"as rtl-mixins;
@use "@material/ripple/mixins"as ripple-mixins;
@use "@material/ripple/functions"as ripple-functions;
@use "@material/elevation/mixins"as elevation-mixins;
@use "@material/shape/mixins"as shape-mixins;
@use "@material/icon-button/mixins"as icon-button;

@use "./variables";

@mixin core-styles($query: feature-targeting-functions.all()) {
  @include ripple($query);
  @include without-ripple($query);
}

@mixin without-ripple($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include item-selected-text-color(variables.$text-selected-color, $query);

  .mdc-tree-view {
    @include fill-color(surface, $query);

    display: block;

    .mdc-tree-view__node {
      @include list-item-height-variant($query);
      @include leaf-padding(variables.$leaf-padding, $query);

      display: flex;
      align-items: center;
      position: relative;
      overflow: hidden;

      .mdc-tree-view__expander {
        @include icon-button.density(-3);
      }

      .mdc-tree-node {
        width: calc(100% - #{variables.$leaf-padding});
        display: flex;
        align-items: center;

        .mdc-tree-node__meta {
          margin-left: auto;
          margin-right: 0;

          @include theme-mixins.prop(color, text-hint-on-background);
        }
      }
    }

    >.mdc-tree-view__list {
      list-style-type: none;
      padding-left: 0;

      >.mdc-tree-view__list-item {
        >mdc-tree-view {
          margin-left: variables.$child-tree-view-margin;
        }
      }
    }
  }
}

@mixin list-item-height-variant($query: feature-targeting-functions.all()) {
  @include list-item-height(variables.$single-line-height, $query);
}

@mixin list-item-height($height, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    height: $height;
  }
}

@mixin leaf-padding($padding, $query: feature-targeting-functions.all()) {
  .mdc-tree-view__leaf-padding {
    width: $padding;
    height: $padding;
    flex-shrink: 0;
  }
}

/// Sets the text color of the list item in selected or activated state.
/// @param {color} $color - The desired text color.
@mixin item-selected-text-color($color, $query: feature-targeting-functions.all()) {

  // "Selected" is ephemeral and likely to change soon. E.g., selecting one or more photos to share in Google Photos.
  // "Activated" is more permanent. E.g., the currently highlighted navigation destination in a drawer.
  .mdc-tree-view__node--selected {
    @include item-primary-text-ink-color($color, $query: $query);
  }
}

@mixin item-primary-text-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(color, $color);
  }
}

@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE

  .mdc-tree-view__node {
    @include item-interactive-ripple_($query);
  }
}

@mixin item-interactive-ripple_($query: feature-targeting-functions.all()) {
  @include ripple-mixins.surface($ripple-target: variables.$ripple-target, $query: $query);
  @include ripple-mixins.radius-bounded($ripple-target: variables.$ripple-target, $query: $query);
  @include ripple-mixins.states(theme-variables.prop-value(on-surface), false, $ripple-target: variables.$ripple-target, $query: $query);
  @include ripple-mixins.states-selected(primary, false, $ripple-target: variables.$ripple-target, $query: $query);

  #{variables.$ripple-target} {
    @include ripple-mixins.target-common($query: $query);
  }
}

@mixin fill-color($color, $query: functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(background-color, $color);
  }
}

@mixin selected-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    &.mdc-tree-view__node--selected {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
